{"name":"Lgbluetooth","tagline":"Simple, block-based, lightweight library over CoreBluetooth.","body":"LGBluetooth\r\n===========\r\n\r\nSimple, block-based, lightweight library over CoreBluetooth.\r\n\r\n<h2>Steps to start using</h2>\r\n\r\n1. Drag and Drop it into your project\r\n\r\n2. Import \"LGBluetooth.h\"\r\n\r\n3. Star it on github! (It really makes sense)\r\n\r\n4. You are ready to go!\r\n\r\n<h2>Usage</h2>\r\n\r\nFor example we have a peripheral which has \"5ec0\" service, with 3 characteristics\r\n<img src=\"https://raw2.github.com/DavidSahakyan/LGBluetooth/master/Screenshots/1.PNG\" width=\"320\" height=\"480\"><br>\r\n\r\n* \"cef9\" characteristic is writable\r\n* \"f045\" characteristic is readable\r\n* \"8fdb\" characteristic is readable\r\n\r\n<pre>\r\n- (IBAction)testPressed:(UIButton *)sender\r\n{\r\n    [[LGCentralManager sharedInstance] scanForPeripheralsByInterval:4\r\n                                                         completion:^(NSArray *peripherals)\r\n     {\r\n         if (peripherals.count) {\r\n             [self testPeripheral:peripherals[0]];\r\n         }\r\n     }];\r\n}\r\n\r\n- (void)testPeripheral:(LGPeripheral *)peripheral\r\n{\r\n    [peripheral connectWithCompletion:^(NSError *error) {\r\n        [peripheral discoverServicesWithCompletion:^(NSArray *services, NSError *error) {\r\n            for (LGService *service in services) {\r\n                if ([service.UUIDString isEqualToString:@\"5ec0\"]) {\r\n                    [service discoverCharacteristicsWithCompletion:^(NSArray *characteristics, NSError *error) {\r\n                        __block int i = 0;\r\n                        for (LGCharacteristic *charact in characteristics) {\r\n                            if ([charact.UUIDString isEqualToString:@\"cef9\"]) {\r\n                                [charact writeByte:0xFF completion:^(NSError *error) {\r\n                                    if (++i == 3) {\r\n                                        [peripheral disconnectWithCompletion:nil];\r\n                                    }\r\n                                }];\r\n                            } else {\r\n                                [charact readValueWithBlock:^(NSData *data, NSError *error) {\r\n                                    if (++i == 3) {\r\n                                        [peripheral disconnectWithCompletion:nil];\r\n                                    }\r\n                                }];\r\n                            }\r\n                        }\r\n                    }];\r\n                }\r\n            }\r\n        }];\r\n    }];\r\n}\r\n</pre>\r\n\r\nAfter running code we can see the result.\r\n\r\n<img src=\"https://raw2.github.com/DavidSahakyan/LGBluetooth/master/Screenshots/5.PNG\" width=\"320\" height=\"480\"><br>\r\n\r\nIn this example I'm scanning peripherals for 4 seconds.\r\nAfter which I am passing first peripheral to test method.\r\n\r\nTest method connects to peripheral, discoveres services, discoveres characteristics of \"5ec0\" service.\r\nAftter which reads \"f045\", \"8fdb\", and writes 0xFF to \"cef9\" and disconnects from peripheral.\r\n\r\nHere is the log from console \r\n<pre>\r\nConnection with error - (null)\r\nService discovered - Battery\r\nService discovered - Current Time\r\nService discovered - Unknown (5ec0)\r\nCharacteristic discovered - Unknown (cef9)\r\nCharacteristic discovered - Unknown (f045)\r\nCharacteristic discovered - Unknown (8fdb)\r\nCharacteristic - Unknown (cef9) wrote with error - (null)\r\nCharacteristic - Unknown (f045) value - 1234567890 error - \r\nCharacteristic - Unknown (8fdb) value - 11111111111 error - (null)\r\nDisconnect with error - (null)\r\n</pre>\r\n\r\n<h2>Reasons of using LGBluetooth</h2>\r\nAs we know CoreBluetooth is very hard to use - \r\nThe methods of objects in Core bluetooth are messy\r\n\r\nFor example connectPeripheral:options: is written in CBCentralManager,\r\ndiscoverCharacteristics:forService is written in Peripheral,\r\nwriteValue:forCharacteristic:type, readValueForCharacteristic are also in Peripheral\r\n\r\nThis messy code makes CoreBluetooth development really painfull.\r\nFor example if you need to read characteristic value, you need to call \"connect\" on central object, wait for Central delegate callback,\r\nAfter that call \"discover services\", wait peripheral delegate callback, \"discover characteristic\" which you planned and wait for delegate callback, \"readValue\" and again wait for delegate callback.\r\nWhat will happen if your program will make 2 connections at once?\r\nHandling such cases makes messy code, and raises hundred of bugs.\r\n\r\nDon't worry, now you can forgot about that hell - LGBluetooth uses blocks for callbacks, you can start using modern code and hierarchical calls.\r\n\r\n<h2>LICENSE</h2>\r\nLGBluetooth is under MIT License (see LICENSE file)\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}